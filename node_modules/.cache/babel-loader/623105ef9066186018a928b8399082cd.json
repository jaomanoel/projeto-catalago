{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.migrate = exports.readMigrations = void 0;\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nasync function readMigrations(migrationPath) {\n  const migrationsPath = migrationPath || path.join(process.cwd(), 'migrations');\n  const location = path.resolve(migrationsPath); // Get the list of migration files, for example:\n  //   { id: 1, name: 'initial', filename: '001-initial.sql' }\n  //   { id: 2, name: 'feature', filename: '002-feature.sql' }\n\n  const migrationFiles = await new Promise((resolve, reject) => {\n    fs.readdir(location, (err, files) => {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(files.map(x => x.match(/^(\\d+).(.*?)\\.sql$/)).filter(x => x !== null).map(x => ({\n        id: Number(x[1]),\n        name: x[2],\n        filename: x[0]\n      })).sort((a, b) => Math.sign(a.id - b.id)));\n    });\n  });\n\n  if (!migrationFiles.length) {\n    throw new Error(`No migration files found in '${location}'.`);\n  } // Get the list of migrations, for example:\n  //   { id: 1, name: 'initial', filename: '001-initial.sql', up: ..., down: ... }\n  //   { id: 2, name: 'feature', filename: '002-feature.sql', up: ..., down: ... }\n\n\n  return Promise.all(migrationFiles.map(migration => new Promise((resolve, reject) => {\n    const filename = path.join(location, migration.filename);\n    fs.readFile(filename, 'utf-8', (err, data) => {\n      if (err) {\n        return reject(err);\n      }\n\n      const [up, down] = data.split(/^--\\s+?down\\b/im);\n      const migrationData = migration;\n      migrationData.up = up.replace(/^-- .*?$/gm, '').trim(); // Remove comments\n\n      migrationData.down = down ? down.trim() : ''; // and trim whitespaces\n\n      resolve(migrationData);\n    });\n  })));\n}\n\nexports.readMigrations = readMigrations;\n/**\n * Migrates database schema to the latest version\n */\n\nasync function migrate(db) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config.force = config.force || false;\n  config.table = config.table || 'migrations';\n  const {\n    force,\n    table\n  } = config;\n  const migrations = config.migrations ? config.migrations : await readMigrations(config.migrationsPath); // Create a database table for migrations meta data if it doesn't exist\n\n  await db.run(`CREATE TABLE IF NOT EXISTS \"${table}\" (\n  id   INTEGER PRIMARY KEY,\n  name TEXT    NOT NULL,\n  up   TEXT    NOT NULL,\n  down TEXT    NOT NULL\n)`); // Get the list of already applied migrations\n\n  let dbMigrations = await db.all(`SELECT id, name, up, down FROM \"${table}\" ORDER BY id ASC`); // Undo migrations that exist only in the database but not in files,\n  // also undo the last migration if the `force` option is enabled.\n\n  const lastMigration = migrations[migrations.length - 1];\n\n  for (const migration of dbMigrations.slice().sort((a, b) => Math.sign(b.id - a.id))) {\n    if (!migrations.some(x => x.id === migration.id) || force && migration.id === lastMigration.id) {\n      await db.run('BEGIN');\n\n      try {\n        await db.exec(migration.down);\n        await db.run(`DELETE FROM \"${table}\" WHERE id = ?`, migration.id);\n        await db.run('COMMIT');\n        dbMigrations = dbMigrations.filter(x => x.id !== migration.id);\n      } catch (err) {\n        await db.run('ROLLBACK');\n        throw err;\n      }\n    } else {\n      break;\n    }\n  } // Apply pending migrations\n\n\n  const lastMigrationId = dbMigrations.length ? dbMigrations[dbMigrations.length - 1].id : 0;\n\n  for (const migration of migrations) {\n    if (migration.id > lastMigrationId) {\n      await db.run('BEGIN');\n\n      try {\n        await db.exec(migration.up);\n        await db.run(`INSERT INTO \"${table}\" (id, name, up, down) VALUES (?, ?, ?, ?)`, migration.id, migration.name, migration.up, migration.down);\n        await db.run('COMMIT');\n      } catch (err) {\n        await db.run('ROLLBACK');\n        throw err;\n      }\n    }\n  }\n}\n\nexports.migrate = migrate;","map":{"version":3,"mappings":"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","names":["readMigrations","migrationPath","migrationsPath","path","join","process","cwd","location","resolve","migrationFiles","Promise","reject","fs","readdir","err","files","map","x","match","filter","id","Number","name","filename","sort","a","b","Math","sign","length","Error","all","migration","readFile","data","up","down","split","migrationData","replace","trim","exports","migrate","db","config","force","table","migrations","run","dbMigrations","lastMigration","slice","some","exec","lastMigrationId"],"sources":["../../src/utils/migrate.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}