{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Database = void 0;\n\nconst Statement_1 = require(\"./Statement\");\n\nconst migrate_1 = require(\"./utils/migrate\");\n\nconst strings_1 = require(\"./utils/strings\");\n\nconst format_error_1 = require(\"./utils/format-error\");\n/**\n * Promisified wrapper for the sqlite3#Database interface.\n */\n\n\nclass Database {\n  constructor(config) {\n    this.config = config;\n    this.db = null;\n  }\n  /**\n   * Event handler when verbose mode is enabled.\n   * @see https://github.com/mapbox/node-sqlite3/wiki/Debugging\n   */\n\n\n  on(event, listener) {\n    this.db.on(event, listener);\n  }\n  /**\n   * Returns the underlying sqlite3 Database instance\n   */\n\n\n  getDatabaseInstance() {\n    return this.db;\n  }\n  /**\n   * Opens the database\n   */\n\n\n  open() {\n    return new Promise((resolve, reject) => {\n      let {\n        filename,\n        mode,\n        driver\n      } = this.config; // https://github.com/mapbox/node-sqlite3/wiki/API#new-sqlite3databasefilename-mode-callback\n\n      if (filename === null || filename === undefined) {\n        throw new Error('sqlite: filename cannot be null / undefined');\n      }\n\n      if (!driver) {\n        throw new Error('sqlite: driver is not defined');\n      }\n\n      if (mode) {\n        this.db = new driver(filename, mode, err => {\n          if (err) {\n            return reject((0, format_error_1.formatError)(err));\n          }\n\n          resolve();\n        });\n      } else {\n        this.db = new driver(filename, err => {\n          if (err) {\n            return reject((0, format_error_1.formatError)(err));\n          }\n\n          resolve();\n        });\n      }\n    });\n  }\n  /**\n   * Closes the database.\n   */\n\n\n  close() {\n    return new Promise((resolve, reject) => {\n      this.db.close(err => {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n\n        resolve();\n      });\n    });\n  }\n  /**\n   * @see https://github.com/mapbox/node-sqlite3/wiki/API#databaseconfigureoption-value\n   */\n\n\n  configure(option, value) {\n    this.db.configure(option, value);\n  }\n  /**\n   * Runs the SQL query with the specified parameters. It does not retrieve any result data.\n   * The function returns the Database object for which it was called to allow for function chaining.\n   *\n   * @param {string} sql The SQL query to run.\n   *\n   * @param {any} [params, ...] When the SQL statement contains placeholders, you\n   * can pass them in here. They will be bound to the statement before it is\n   * executed. There are three ways of passing bind parameters: directly in\n   * the function's arguments, as an array, and as an object for named\n   * parameters. This automatically sanitizes inputs.\n   *\n   * @see https://github.com/mapbox/node-sqlite3/wiki/API#databaserunsql-param--callback\n   */\n\n\n  run(sql) {\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n\n    return new Promise((resolve, reject) => {\n      const sqlObj = (0, strings_1.toSqlParams)(sql, params);\n      this.db.run(sqlObj.sql, ...sqlObj.params, function (err) {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n\n        resolve({\n          stmt: new Statement_1.Statement(this.stmt),\n          lastID: this.lastID,\n          changes: this.changes\n        });\n      });\n    });\n  }\n  /**\n   * Runs the SQL query with the specified parameters and resolves with\n   * with the first result row afterwards. If the result set is empty, returns undefined.\n   *\n   * The property names correspond to the column names of the result set.\n   * It is impossible to access them by column index; the only supported way is by column name.\n   *\n   * @param {string} sql The SQL query to run.\n   *\n   * @param {any} [params, ...] When the SQL statement contains placeholders, you\n   * can pass them in here. They will be bound to the statement before it is\n   * executed. There are three ways of passing bind parameters: directly in\n   * the function's arguments, as an array, and as an object for named\n   * parameters. This automatically sanitizes inputs.\n   *\n   * @see https://github.com/mapbox/node-sqlite3/wiki/API#databasegetsql-param--callback\n   */\n\n\n  get(sql) {\n    for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      params[_key2 - 1] = arguments[_key2];\n    }\n\n    return new Promise((resolve, reject) => {\n      const sqlObj = (0, strings_1.toSqlParams)(sql, params);\n      this.db.get(sqlObj.sql, ...sqlObj.params, (err, row) => {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n\n        resolve(row);\n      });\n    });\n  }\n\n  each(sql) {\n    for (var _len3 = arguments.length, params = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      params[_key3 - 1] = arguments[_key3];\n    }\n\n    return new Promise((resolve, reject) => {\n      const callback = params.pop();\n\n      if (!callback || typeof callback !== 'function') {\n        throw new Error('sqlite: Last param of Database#each() must be a callback function');\n      }\n\n      if (params.length > 0) {\n        const positional = params.pop();\n\n        if (typeof positional === 'function') {\n          throw new Error('sqlite: Database#each() should only have a single callback defined. See readme for usage.');\n        }\n\n        params.push(positional);\n      }\n\n      const sqlObj = (0, strings_1.toSqlParams)(sql, params);\n      this.db.each(sqlObj.sql, ...sqlObj.params, (err, row) => {\n        if (err) {\n          return callback((0, format_error_1.formatError)(err), null);\n        }\n\n        callback(null, row);\n      }, (err, count) => {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n\n        resolve(count);\n      });\n    });\n  }\n  /**\n   * Runs the SQL query with the specified parameters. The parameters are the same as the\n   * Database#run function, with the following differences:\n   *\n   * If the result set is empty, it will be an empty array, otherwise it will\n   * have an object for each result row which\n   * in turn contains the values of that row, like the Database#get function.\n   *\n   * Note that it first retrieves all result rows and stores them in memory.\n   * For queries that have potentially large result sets, use the Database#each\n   * function to retrieve all rows or Database#prepare followed by multiple\n   * Statement#get calls to retrieve a previously unknown amount of rows.\n   *\n   * @param {string} sql The SQL query to run.\n   *\n   * @param {any} [params, ...] When the SQL statement contains placeholders, you\n   * can pass them in here. They will be bound to the statement before it is\n   * executed. There are three ways of passing bind parameters: directly in\n   * the function's arguments, as an array, and as an object for named\n   * parameters. This automatically sanitizes inputs.\n   *\n   * @see https://github.com/mapbox/node-sqlite3/wiki/API#databaseallsql-param--callback\n   */\n\n\n  all(sql) {\n    for (var _len4 = arguments.length, params = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      params[_key4 - 1] = arguments[_key4];\n    }\n\n    return new Promise((resolve, reject) => {\n      const sqlObj = (0, strings_1.toSqlParams)(sql, params);\n      this.db.all(sqlObj.sql, ...sqlObj.params, (err, rows) => {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n\n        resolve(rows);\n      });\n    });\n  }\n  /**\n   * Runs all SQL queries in the supplied string. No result rows are retrieved. If a query fails,\n   * no subsequent statements will be executed (wrap it in a transaction if you want all\n   * or none to be executed).\n   *\n   * Note: This function will only execute statements up to the first NULL byte.\n   * Comments are not allowed and will lead to runtime errors.\n   *\n   * @param {string} sql The SQL query to run.\n   * @param {any} [params, ...] Same as the `params` parameter of `all`\n   * @see https://github.com/mapbox/node-sqlite3/wiki/API#databaseexecsql-callback\n   */\n\n\n  exec(sql) {\n    for (var _len5 = arguments.length, params = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      params[_key5 - 1] = arguments[_key5];\n    }\n\n    return new Promise((resolve, reject) => {\n      const sqlObj = (0, strings_1.toSqlParams)(sql, params);\n      this.db.exec(sqlObj.sql, err => {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n\n        resolve();\n      });\n    });\n  }\n  /**\n   * Prepares the SQL statement and optionally binds the specified parameters.\n   * When bind parameters are supplied, they are bound to the prepared statement.\n   *\n   * @param {string} sql The SQL query to run.\n   * @param {any} [params, ...] When the SQL statement contains placeholders, you\n   * can pass them in here. They will be bound to the statement before it is\n   * executed. There are three ways of passing bind parameters: directly in\n   * the function's arguments, as an array, and as an object for named\n   * parameters. This automatically sanitizes inputs.\n   * @returns Promise<Statement> Statement object\n   */\n\n\n  prepare(sql) {\n    for (var _len6 = arguments.length, params = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      params[_key6 - 1] = arguments[_key6];\n    }\n\n    return new Promise((resolve, reject) => {\n      const sqlObj = (0, strings_1.toSqlParams)(sql, params);\n      const stmt = this.db.prepare(sqlObj.sql, ...sqlObj.params, err => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(new Statement_1.Statement(stmt));\n      });\n    });\n  }\n  /**\n   * Loads a compiled SQLite extension into the database connection object.\n   *\n   * @param {string} path Filename of the extension to load\n   */\n\n\n  loadExtension(path) {\n    return new Promise((resolve, reject) => {\n      this.db.loadExtension(path, err => {\n        if (err) {\n          return reject((0, format_error_1.formatError)(err));\n        }\n\n        resolve();\n      });\n    });\n  }\n  /**\n   * Performs a database migration.\n   */\n\n\n  async migrate(config) {\n    await (0, migrate_1.migrate)(this, config);\n  }\n  /**\n   * The methods underneath requires creative work to implement. PRs / proposals accepted!\n   */\n\n  /*\n   * Unsure if serialize can be made into a promise.\n   */\n\n\n  serialize() {\n    throw new Error('sqlite: Currently not implemented. Use getDatabaseInstance().serialize() instead.');\n  }\n  /*\n   * Unsure if parallelize can be made into a promise.\n   */\n\n\n  parallelize() {\n    throw new Error('sqlite: Currently not implemented. Use getDatabaseInstance().parallelize() instead.');\n  }\n\n}\n\nexports.Database = Database;","map":{"version":3,"mappings":"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","names":["Database","constructor","config","db","on","event","listener","getDatabaseInstance","open","Promise","resolve","reject","filename","mode","driver","undefined","Error","err","close","configure","option","value","run","sql","params","sqlObj","stmt","Statement_1","lastID","changes","get","row","each","callback","pop","length","positional","push","count","all","rows","exec","prepare","loadExtension","path","migrate","serialize","parallelize","exports"],"sources":["../src/Database.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}